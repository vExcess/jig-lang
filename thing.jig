// var a = "global a";
// var b = "global b";
// var c = "global c";
// {
//   var a = "outer a";
//   var b = "outer b";
//   {
//     var a = "inner a";
//     print a;
//     print b;
//     print c;
//   }
//   print a;
//   print b;
//   print c;
// }
// print a;
// print b;
// print c;


// var test = 1 * -8 + 2 * 3
// print test
// print "true" + "false"
// print 1 + 2


// var a = 1;
// {
//   var a = a + 2;
//   print "A: "
//   print a;
// }


// // No initializers.
// var a;
// var b;
// a = "assigned";
// print a; // OK, was assigned first.
// // print b; // Error!

// if (true || false) {
//     print "should print"
// }
// if (false && true) {
//     print "should NOT print"
// }
// if true && false {
//     print "should NOT print"
// }

// print null || "this line prints true"
// print null ?? "should print 2"

// var a = 0;
// var temp;

// for (var b = 1; a < 10000; b = temp + b) {
//   print a;
//   temp = a;
//   a = b;
// }

// fn procedure() {
//   print "don't return anything";
// }
// var result = procedure();
// print result; // ?

// fn fib(n) {
//   if (n <= 1) {
//     return n;
//   }
//   var temp = n - 1;
//   return fib(n - 2) + fib(temp);
// }
// var start = millis()
// for (var i = 0; i < 30; i = i + 1) {
//   print fib(i);
// }
// var end = millis()
// print "TIME:"
// print end - start

// fn makeCounter() {
//   var i = 0;
//   fn count() {
//     i = i + 1;
//     print i;
//   }

//   return count;
// }
// var counter = makeCounter();
// counter(); // "1".
// counter(); // "2".

// fn thrice(func) {
//   for (var i = 1; i <= 3; i = i + 1) {
//     func(i);
//   }
// }
// thrice(fn temp(a) {
//   print a;
// });

// fn scope(a) {
//   var a = "local";
// }
// scope(0)

// var a = "global";
// {
//   fn showA() {
//     print a;
//   }
//   showA();
//   var a = "block";
//   showA();
// }

// class Breakfast {
//     new() {
//         print("Breakfast created!")
//         return
//     }

//     cook() {
//         print("Cooking: " + this.whatToCook);
//     }
// }
// print Breakfast
// print Breakfast.new
// var foo = new Breakfast()
// foo.whatToCook = "bacon";
// print(foo)
// foo.cook()
// var cook = foo.cook;
// cook(foo);

// class Thing {
//     static foo(num) {
//         print(num)
//         Thing.pfoo1(num)
//         Thing.pfoo2(num)
//     }
//     static private pfoo1(num) {
//         print(num)
//     }
//     private static pfoo2(num) {
//         print(num)
//     }

//     bar() {
//         print(this.value)
//         this.pbar()
//     }
//     private pbar() {
//         print(this.value)
//     }
// }
// var thing = new Thing()
// thing.value = 999
// Thing.foo(123)
// thing.bar()

// class Doughnut {
//     cook() {
//         print "Fry until golden brown.";
//     }
// }
// class BostonCream extends Doughnut {
    
// }
// var donut = new BostonCream();
// donut.cook();

// class Doughnut {
//     cook() {
//         print "Fry until golden brown.";
//     }
// }
// class BostonCream extends Doughnut {
//     cook() {
//         print "overide.";
//     }
// }
// var donut = new BostonCream();
// donut.cook();

class Parent {
    new() {
        print("init parent");
    }
    cook() {
        print "cook parent";
    }
}
class Child extends Parent {
    new() {
        // super.Parent();
        print ("init child");
    }
    cook() {
        // super.Parent.cook();
        print ("cook child");
    }
}
// var child = new Child()
// child.cook()
new Child().cook()

// class Box {}
// fn notMethod(argument) {
//     print "called function with " + argument;
// }
// var box = new Box();
// box.function = notMethod;
// print box.function
// box.function("asdfasdf");

// class Thing {
//   getCallback() {
//     fn localFunction() {
//       print this;
//     }
//     return localFunction;
//   }
// }
// var callback = new Thing().getCallback();
// callback();