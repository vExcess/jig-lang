// var a = "global a";
// var b = "global b";
// var c = "global c";
// {
//   var a = "outer a";
//   var b = "outer b";
//   {
//     var a = "inner a";
//     print a;
//     print b;
//     print c;
//   }
//   print a;
//   print b;
//   print c;
// }
// print a;
// print b;
// print c;


// var test = 1 * -8 + 2 * 3
// print test
// print "true" + "false"
// print 1 + 2


// var a = 1;
// {
//   var a = a + 2;
//   print "A: "
//   print a;
// }


// // No initializers.
// var a;
// var b;
// a = "assigned";
// print a; // OK, was assigned first.
// // print b; // Error!

// if (true || false) {
//     print "should print"
// }
// if (false && true) {
//     print "should NOT print"
// }
// if true && false {
//     print "should NOT print"
// }

// print null || "this line prints true"
// print null ?? "should print 2"

// var a = 0;
// var temp;

// for (var b = 1; a < 10000; b = temp + b) {
//   print a;
//   temp = a;
//   a = b;
// }

// fn procedure() {
//   print "don't return anything";
// }
// var result = procedure();
// print result; // ?

// fn fib(n) {
//   if (n <= 1) {
//     return n;
//   }
//   var temp = n - 1;
//   return fib(n - 2) + fib(temp);
// }
// var start = millis()
// for (var i = 0; i < 30; i = i + 1) {
//   print fib(i);
// }
// var end = millis()
// print "TIME:"
// print end - start

// fn makeCounter() {
//   var i = 0;
//   fn count() {
//     i = i + 1;
//     print i;
//   }

//   return count;
// }
// var counter = makeCounter();
// counter(); // "1".
// counter(); // "2".

// fn thrice(func) {
//   for (var i = 1; i <= 3; i = i + 1) {
//     func(i);
//   }
// }
// thrice(fn temp(a) {
//   print a;
// });

// fn scope(a) {
//   var a = "local";
// }
// scope(0)

// var a = "global";
// {
//   fn showA() {
//     print a;
//   }
//   showA();
//   var a = "block";
//   showA();
// }

class Breakfast {
  new() {
    print("hello")
  }

  cook() {
    print "Eggs a-fryin'!";
  }

  // serve(who) {
  //   print "Enjoy your breakfast, " + who + ".";
  // }
}
print Breakfast
print Breakfast.new
var foo = new Breakfast()
// print(foo)
foo.cook()
// foo.test1 = "Hello";
// print foo.test1;

// class Thing {
//   getCallback() {
//     fn localFunction() {
//       print this;
//     }

//     return localFunction;
//   }
// }
// var callback = new Thing().getCallback();
// callback();